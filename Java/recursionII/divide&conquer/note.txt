A divide-and-conquer algorithm works by recursively breaking the problem down into TWO or MORE SUBPROBLEMS
of the same or related type, until these subproblems become simple 
enough to be solved directly [1]. Then one COMBINEs the results of subproblems to form 
the final solution.

Tree Steps in general:
1. DIVIDE. Divide the problem S into a set of subproblems: {S_1, S_2, ... S_n} where 
			nâ‰¥2, there are usually more than one subproblem.

2. CONQUER. Solve each subproblem RECURSIVELY, e.g. mergeSort-> divide recursively. 

3. COMBINE. Combine the results of each subproblem.

The ESSENTIAL part of the divide and conquer is to figure out the RECURRENCE RELATIONSHIP between 
the SUBPROBLEMS and the ORIGINAL problem, which subsequently defines the functions 
of DIVIDE() and COMBINE()

SeachA2DMatrixII.java
- Pay close attention to the LAW OF THE VALUES

Merge Sort: DIVIDE and then Combine
Quick Sort: PARTITION and then Concatenate

ARRAY (process in-place) => nums, START, END ; SortArray.java, QuickSort.java